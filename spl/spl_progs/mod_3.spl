alias fun_num R1;
//open
if(fun_num==3) then
    alias filename R2;
    alias i R3;
    i=0;
    while(i<60) do
        if([INODE_TABLE+i*16+1]==filename) then
            break;
        endif;
        i=i+1;
    endwhile;
    if(i==60) then
        R0=-1;
        return;
    endif;
    multipush(R1,R2,R3);
        R1=4;
        R2=i;
        R3=[SYSTEM_STATUS_TABLE+1];
        call MOD_0;
    multipop(R1,R2,R3);
    if(R0==-1) then
        R0=-1;
        return;
    endif;
    if([INODE_TABLE+i*16]==EXEC) then
        multipush(R1,R2,R3);
        R1=5;
        R2=i;
        R3=[SYSTEM_STATUS_TABLE+1];
        call MOD_0;
        multipop(R1,R2,R3);
        R0=-1;
        return;
    endif;
    alias iter R4;
    iter=0;
    while(iter<32) do
        if([OPEN_FILE_TABLE+iter*4]==-1) then
            break;
        endif;
        iter=iter+1;
    endwhile;
    if(iter==32) then
        multipush(R1,R2,R3,R4);
        R1=5;
        R2=i;
        R3=[SYSTEM_STATUS_TABLE+1];
        call MOD_0;
        multipop(R1,R2,R3,R4);
        R0=-2;
        return;
    endif;
    if(filename=="root") then
        [OPEN_FILE_TABLE+iter*4]=INODE_ROOT;
    else
        if([FILE_STATUS_TABLE+i*4+1]==-1) then
            [FILE_STATUS_TABLE+i*4+1]=1;
        else 
            [FILE_STATUS_TABLE+i*4+1]=[FILE_STATUS_TABLE+i*4+1]+1;
        endif;
        [OPEN_FILE_TABLE+iter*4]=i;
    endif;
    [OPEN_FILE_TABLE+iter*4+1]=1;
    [OPEN_FILE_TABLE+iter*4+2]=0;
        multipush(R1,R2,R3,R4);
        R1=5;
        R2=i;
        R3=[SYSTEM_STATUS_TABLE+1];
        call MOD_0;
        multipop(R1,R2,R3,R4);
        R0=iter;
        return;
endif;
//close
if(fun_num==4) then
    alias ofti R2;
    alias i R3;
    alias openfile R4;
    openfile=OPEN_FILE_TABLE+ofti*4;
    alias filestatus R5;
    i=[openfile];
    filestatus=FILE_STATUS_TABLE+i*4+1;
    [openfile+1]=[openfile+1]-1;
    if([openfile+1]==0) then
        [openfile+0]=-1;
        [openfile+1]=-1;
        if(i!=INODE_ROOT) then
            [filestatus]=[filestatus]-1;
        endif;
            if([filestatus]==0) then
                [filestatus]=-1;
            endif;
        
    endif;
return;
endif;

//bufferread
if(fun_num==2) then
    alias block R2;
    alias offsetval R3;
    alias memaddr R4;
    alias buffno R5;
    buffno=block%4;
    multipush(R1,R2,R3,R4,R5);
    R1=1;
    R2=buffno;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5);
    if([BUFFER_TABLE+buffno*4]!=block) then
        if([BUFFER_TABLE+buffno*4+1]==1) then
            multipush(R1,R2,R3,R4,R5);
            R3 = 71 + buffno;
            R4 = [BUFFER_TABLE + 4*buffno];
            R1 = 1;
            R2 = [SYSTEM_STATUS_TABLE+1];
            call MOD_4;
            multipop(R1,R2,R3,R4,R5);
        endif;

        multipush(R1,R2,R3,R4,R5);
        R1 = 2;
        R3 = 71 + buffno;
        R4 = block;
        R2 = [SYSTEM_STATUS_TABLE+1];
        call MOD_4;
        multipop(R1,R2,R3,R4,R5);

        [BUFFER_TABLE + 4*buffno] = block;
        [BUFFER_TABLE + 4*buffno + 1] = 0;
    endif;
    [([PTBR + 2 * (memaddr)/ 512] * 512) + ((memaddr) % 512)] = [ (71 + buffno)*512 + offsetval ];
     multipush(R1,R2,R3,R4,R5);
     R1=2;
     R2=buffno;
     R3=[SYSTEM_STATUS_TABLE+1];
     call MOD_0;
    multipop(R1,R2,R3,R4,R5);

    return;
endif;

//bufferwrite
if(fun_num==1) then
    alias block R2;
    alias offsetval R3;
    alias word R4;
    alias buffno R5;
    buffno=block%4;
    multipush(R1,R2,R3,R4,R5);
    R1=1;
    R2=buffno;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5);
    if([BUFFER_TABLE+buffno*4]!=block) then
        if([BUFFER_TABLE+buffno*4+1]==1) then
            multipush(R1,R2,R3,R4,R5);
            R3 = 71 + buffno;
            R4 = [BUFFER_TABLE + 4*buffno];
            R1 = 1;
            R2 = [SYSTEM_STATUS_TABLE+1];
            call MOD_4;
            multipop(R1,R2,R3,R4,R5);
        endif;

        multipush(R1,R2,R3,R4,R5);
        R1 = 2;
        R3 = 71 + buffno;
        R4 = block;
        R2 = [SYSTEM_STATUS_TABLE+1];
        call MOD_4;
        multipop(R1,R2,R3,R4,R5);

        [BUFFER_TABLE + 4*buffno] = block;
        [BUFFER_TABLE + 4*buffno + 1] = 0;
    endif;

    [ (71 + buffno)*512 + offsetval ]=word;
    [BUFFER_TABLE + 4*buffno + 1] = 1; 
    multipush(R1,R2,R3,R4,R5);
     R1=2;
     R2=buffno;
     R3=[SYSTEM_STATUS_TABLE+1];
     call MOD_0;
    multipop(R1,R2,R3,R4,R5);

    return;
endif;