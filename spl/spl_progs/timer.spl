//breakpoint;
// if([SYSTEM_STATUS_TABLE+6]<[SYSTEM_STATUS_TABLE+2]) then
// 	[SYSTEM_STATUS_TABLE+6]=[SYSTEM_STATUS_TABLE+2];
// endif;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) +13]=SP;
SP=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1])*16 + 11]*512 -1;


backup;

if ( [ SYSTEM_STATUS_TABLE + 5 ] != 0 )then
    if ( [SYSTEM_STATUS_TABLE + 1] == SWAPPER_DAEMON && [ SYSTEM_STATUS_TABLE + 5 ] == SWAP_OUT )then
        R1 = 1;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_6;
    else
        if ( [SYSTEM_STATUS_TABLE + 1] == SWAPPER_DAEMON && [ SYSTEM_STATUS_TABLE + 5 ] == SWAP_IN )then
            R1 = 2;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            call MOD_6;
        endif;

    endif;
else
    if ( [ SYSTEM_STATUS_TABLE + 2 ] < MEM_LOW )then
        [ SYSTEM_STATUS_TABLE + 5 ] = SWAP_OUT;
    else

        if ( [SYSTEM_STATUS_TABLE + 4] > 0 )then
        
            alias i R1;
            i=3;
            while(i < MAX_PROC_NUM-1)do
                if ( ([PROCESS_TABLE + 16*i + 6 ] == 1 && [PROCESS_TABLE + 16*i] > MAX_TICK ) || [ SYSTEM_STATUS_TABLE + 2 ] > MEM_HIGH )then
                    [ SYSTEM_STATUS_TABLE + 5 ] = SWAP_IN;
                    break;
                endif;
                i=i+1;
            endwhile;

        endif;
    endif;

endif;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) +4]=READY;

alias i R0;
i=0;
while(i<16)  do
	if([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) +4]!=TERMINATED) then
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) ]=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) ]+1;
	endif;
	i=i+1;
endwhile;

call SCHEDULER;

restore;
SP=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) +13];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) +9]=0;


ireturn; 