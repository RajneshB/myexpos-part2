//breakpoint;
[PROCESS_TABLE  + ([SYSTEM_STATUS_TABLE+1]*16) +9]=-1;
[PROCESS_TABLE+ ([SYSTEM_STATUS_TABLE+1]*16)+13]=SP;
SP=[PROCESS_TABLE+ ([SYSTEM_STATUS_TABLE+1]*16)+11]*512 -1;
backup;
multipush(EIP);
if(EC!=0 || [PROCESS_TABLE+ ([SYSTEM_STATUS_TABLE+1]*16)+13]==PTLR*512 -1) then
    print EC;
    multipush(R0,R1,R2);
    R1=3;
    R2=[SYSTEM_STATUS_TABLE+1];
    call MOD_1;
    multipop(R0,R1,R3);
    multipush(R0,R1,R2,R3);
    call SCHEDULER;
    multipop(R0,R1,R2,R3);
endif;
if(EC==0) then
    if(EPN>=4 && EPN<8) then
    // print "code lazy";
        multipush(R0,R1,R2,R3);
        R1=5;
        R2=[DISK_MAP_TABLE+ [SYSTEM_STATUS_TABLE+1]*10+EPN];
        call MOD_2;
        [PTBR+EPN*2]=R0;
        [PTBR+EPN*2+1]="1100";
        multipop(R0,R1,R2,R3);


    else
        // print "heap";
        multipush(R0,R1,R2,R3);
        R1=1;
        call MOD_2;
        // print "first";

        [PTBR+4]=R0;
        [PTBR+4+1]="1110";
        // multipop(R0,R1,R2,R3);
        // multipush(R0,R1,R2,R3);
        R1=1;
        call MOD_2;
        // print "second";

        [PTBR+6]=R0;
        [PTBR+6+1]="1110";
        multipop(R0,R1,R2,R3);

    endif;
endif;
multipop(EIP);
restore;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] + 1;
[[PTBR + 2*(SP/512)]*512 + SP%512] = EIP;

ireturn;