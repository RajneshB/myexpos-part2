alias currID R1;
alias syscall R2;
alias userSp R3;
alias mode R10;
alias retval R11;
mode=PROCESS_TABLE+currID*16+9;
currID=[SYSTEM_STATUS_TABLE+1];
userSp=SP;
[PROCESS_TABLE+currID*16+13]=SP;
SP=[PROCESS_TABLE+currID*16+11]*512-1;
retval=[PTBR+(userSp-1)/512*2]*512+(userSp-1)%512;
syscall=[[PTBR+(userSp-5)/512*2]*512+(userSp-5)%512];
[mode]=syscall;

//create syscall
if(syscall==1) then
    alias filename R4;
    alias permission R5;
    filename=[[PTBR+(userSp-4)/512*2]*512+(userSp-4)%512];
    permission=[[PTBR+(userSp-3)/512*2]*512+(userSp-3)%512];
    alias i R6;
    i=0;
    while(i<60) do
        if([INODE_TABLE+i*16+1]==filename) then
            [retval]=0;
            SP=userSp;
            [mode]=0;
            ireturn;
        endif;
        i=i+1;
    endwhile;
    i=0;
    alias userid R14;
    userid=[PROCESS_TABLE+currID*16+3];
    while(i<60) do
        if([INODE_TABLE+i*16]==-1) then
            [INODE_TABLE+i*16+0]=DATA;
            [INODE_TABLE+i*16+1]=filename;
            [INODE_TABLE+i*16+2]=0;
            [INODE_TABLE+i*16+3]=userid;
            [INODE_TABLE+i*16+4]=permission;
            [INODE_TABLE+i*16+8]=-1;
            [INODE_TABLE+i*16+9]=-1;
            [INODE_TABLE+i*16+10]=-1;
            [INODE_TABLE+i*16+11]=-1;
            [ROOT_FILE+i*8+0]=filename;
            [ROOT_FILE+i*8+1]=0;
            [ROOT_FILE+i*8+2]=DATA;
            [ROOT_FILE+i*8+3]=[USER_TABLE+2*userid];
            [ROOT_FILE+i*8+4]=permission;
            [retval]=0;
            SP=userSp;
            [mode]=0;
            ireturn;
        endif;
        i=i+1;
    endwhile;
    [retval]=-1;
    SP=userSp;
     [mode]=0;
    ireturn;


endif;

//delete

if(syscall==4) then
    alias filename R4;
    alias i R5;
    alias userid R6;
    userid=[PROCESS_TABLE+currID*16+3];
    filename=[[PTBR+(userSp-4)/512*2]*512+(userSp-4)%512];
    i=0;
    while(i<60) do
        if([INODE_TABLE+i*16+1]==filename) then
            break;
        endif;
        i=i+1;
    endwhile;
    if(i==60) then
            [retval]=0;
            SP=userSp;
            [mode]=0;
            ireturn;
    endif;
    if([INODE_TABLE+i*16]!=DATA) then
            [retval]=-1;
            SP=userSp;
            [mode]=0;
            ireturn;
    endif;
    
    if([INODE_TABLE+i*16+4]==0) then //permission is exclusive
            if([INODE_TABLE+i*16+3]!=1 && [INODE_TABLE+i*16+3]!=userid) then //owner is not the root nor curr user
                [retval]=-1;
                SP=userSp;
                [mode]=0;
                ireturn;
            endif;
    endif;
    multipush(R1,R2,R3,R4,R5,R6,R10,R11);
    R3=currID;
    R1=4;
    R2=i;
    call MOD_0;
    multipop(R1,R2,R3,R4,R5,R6,R10,R11);

    if([FILE_STATUS_TABLE+4*i+1]!=-1 ) then //file is  open
        multipush(R1,R2,R3,R4,R5,R6,R10,R11);
        R3=currID;
        R1=5;
        R2=i;
        call MOD_0;
        multipop(R1,R2,R3,R4,R5,R6,R10,R11);
        [retval]=-2;
        SP=userSp;
        [mode]=0;
        ireturn;
    endif;

    alias iter R7;
    iter=8;
    //buffer data deletion
    
    while(iter<12)  do
        // print "poda";
        if([INODE_TABLE+i*16+iter]!=-1) then
            if([BUFFER_TABLE+4*([INODE_TABLE+i*16+iter]%MAX_BUFFER)]==[INODE_TABLE+i*16+iter]) then
                [BUFFER_TABLE+4*([INODE_TABLE+i*16+iter]%MAX_BUFFER)+1]=0;
            endif;
            multipush(R1,R2,R3,R4,R5,R6,R10,R11,R7);
            R3=currID;
            R1=4;
            R2=[INODE_TABLE+i*16+iter];
            call MOD_2;
            multipop(R1,R2,R3,R4,R5,R6,R10,R11,R7);
        endif;

        iter=iter+1;
    endwhile;
        // print "patti";

    //inode deletion
    iter=0;
    while(iter<16) do
        [INODE_TABLE+i*16+iter]=-1;
        iter=iter+1;
    endwhile;

    //rootfile deletion
    iter=0;
    while(iter<8) do
        [ROOT_FILE+i*8+iter]=-1;
        iter=iter+1;
    endwhile;
    multipush(R1,R2,R3,R4,R5,R6,R10,R11);
    R3=currID;
    R1=5;
    R2=i;
    call MOD_0;
    multipop(R1,R2,R3,R4,R5,R6,R10,R11);
    [retval]=0;
    SP=userSp;
    [mode]=0;
    ireturn;
endif;

    


