//breakpoint;

alias fun_num R1;
if(fun_num==8) then
alias curr_id R2;

    while([TERMINAL_STATUS_TABLE]==1) do
        [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 +4]=WAIT_TERMINAL;
        multipush(R0,R1,R2,R3);
        call SCHEDULER;
        multipop(R0,R1,R2,R3);
    endwhile;
    [TERMINAL_STATUS_TABLE+0]=1;
    [TERMINAL_STATUS_TABLE+1]=curr_id;
    return;
endif;
if(fun_num==9) then
alias curr_id R2;

    if([TERMINAL_STATUS_TABLE+1]!=curr_id) then
        R0=-1;
        return;
    endif;
    [TERMINAL_STATUS_TABLE]=0;
    alias i R0;
    i=0;
    while(i<16) do
        if([PROCESS_TABLE + i*16+4]==WAIT_TERMINAL) then
            [PROCESS_TABLE + i*16+4]=READY;
        endif;
        i=i+1;
    endwhile;
    R0=0;
    return ;
    
endif;
//aquire disk
if(fun_num==3) then
alias curr_id R2;

    while([DISK_STATUS_TABLE]==1) do 
        [PROCESS_TABLE+curr_id*16+4]=WAIT_DISK;
        multipush(R1,R2);
        call MOD_5;
        multipop(R1,R2);
    endwhile;
    [DISK_STATUS_TABLE]=1;
    [DISK_STATUS_TABLE+4]=curr_id;
    return;
endif;

//Acquire sem
if(fun_num==6) then
alias curr_id R2;

    alias i R3;
    i=0;
    while(i<32) do
        if([SEMAPHORE_TABLE+i*4+1]==0) then
            [SEMAPHORE_TABLE+i*4+1]=1;
            [SEMAPHORE_TABLE+i*4]=-1;
            R0=i;
            return;
        endif;
        i=i+1;
    endwhile;
    R0=-1;
    return;
endif;

//Release sem
if(fun_num==7) then
alias curr_id R2;

alias i R4;

    alias semi R3;
    if([SEMAPHORE_TABLE+semi*4]==curr_id) then
        [SEMAPHORE_TABLE+semi*4]=-1;
        i=0;
        while(i<16) do
            if(([PROCESS_TABLE+i*16+4]==WAIT_SEMAPHORE) && ([PROCESS_TABLE+i*16+5]==semi)) then
                [PROCESS_TABLE+i*16+4]=READY;
            endif;
            i=i+1;
        endwhile;
        [SEMAPHORE_TABLE+semi*4+1]=[SEMAPHORE_TABLE+semi*4+1]-1;
        R0=0;
        return;
    endif;
    R0=-1;
    return;
endif;

//aquire inode
if(fun_num==4) then
    alias i R2;
    alias currID R3;
    while([FILE_STATUS_TABLE+i*4]!=-1) do
        [PROCESS_TABLE+currID*16+4]=WAIT_FILE;
        [PROCESS_TABLE+currID*16+5]=i;
        multipush(R1,R2,R3);
        call SCHEDULER;
        multipop(R1,R2,R3);
    endwhile;
    if([INODE_TABLE+i*16]==-1) then //deleted by other process_entry
        R0=-1;
    else
        [FILE_STATUS_TABLE+i*4]=currID;
        R0=0;
    endif;
    return;
endif;

//release inode
if(fun_num==5) then
    alias i R2;
    alias currID R3;
    
    if([FILE_STATUS_TABLE+i*4]!=currID) then
        R0=-1;
    else
        [FILE_STATUS_TABLE+i*4]=-1;
        alias iter R4;
        iter=0;
        while(iter<16) do
            if([PROCESS_TABLE+iter*16+4]==WAIT_FILE && [PROCESS_TABLE+iter*16+5]==i) then
                    [PROCESS_TABLE+iter*16+4]=READY;
            endif;
            iter=iter+1;
        endwhile;
        R0=0;
    endif;
    return;
endif;
